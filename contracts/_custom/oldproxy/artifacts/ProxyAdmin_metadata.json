{
	"compiler": {
		"version": "0.5.6+commit.b259423e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "proxy",
						"type": "address"
					}
				],
				"name": "getProxyImplementation",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "proxy",
						"type": "address"
					},
					{
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "changeProxyAdmin",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "proxy",
						"type": "address"
					},
					{
						"name": "implementation",
						"type": "address"
					},
					{
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeAndCall",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "proxy",
						"type": "address"
					},
					{
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "upgrade",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "proxy",
						"type": "address"
					}
				],
				"name": "getProxyAdmin",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			}
		],
		"devdoc": {
			"details": "This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.",
			"methods": {
				"changeProxyAdmin(address,address)": {
					"details": "Changes the admin of `proxy` to `newAdmin`.   * Requirements:   * - This contract must be the current admin of `proxy`."
				},
				"getProxyAdmin(address)": {
					"details": "Returns the current admin of `proxy`.   * Requirements:   * - This contract must be the admin of `proxy`."
				},
				"getProxyImplementation(address)": {
					"details": "Returns the current implementation of `proxy`.   * Requirements:   * - This contract must be the admin of `proxy`."
				},
				"isOwner()": {
					"details": "Returns true if the caller is the current owner."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.   * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgrade(address,address)": {
					"details": "Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.   * Requirements:   * - This contract must be the admin of `proxy`."
				},
				"upgradeAndCall(address,address,bytes)": {
					"details": "Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}.   * Requirements:   * - This contract must be the admin of `proxy`."
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/_custom/oldproxy/ProxyAdmin.sol": "ProxyAdmin"
		},
		"evmVersion": "constantinople",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/_custom/oldproxy/Initializable.sol": {
			"keccak256": "0x643a1ff7f7fabbbd9f9511a783f3159033ef27aae0e2dac168cb454ac207fbf3",
			"urls": [
				"bzzr://2276561280341fa6cf8b9a95b4e1c96587042c633102c92762d6e1e8a13ff05d"
			]
		},
		"contracts/_custom/oldproxy/Proxy.sol": {
			"keccak256": "0x884da6e51d3137baf3e6f6bf41ed5b0c9938c010795222ba0d12fae0ba39e69c",
			"urls": [
				"bzzr://a2d681f83963a155a84c5e1542117e8d68d63f9c44436b5ebdd4efeec121dda0"
			]
		},
		"contracts/_custom/oldproxy/ProxyAdmin.sol": {
			"keccak256": "0xe774627a7ee66bad0d65fb33020172f30b3fef33c2ea66aaf8e12c97bc4d9f77",
			"urls": [
				"bzzr://81afbb5e943bce2c44aa1716d11e2e57f49fe30db45c68816083430a4fe89f6f"
			]
		},
		"contracts/_custom/oldproxy/TransparentUpgradeableProxy.sol": {
			"keccak256": "0x97eae08524cab8dff91f72b5dba3bb81fa61508cd70f4b677d32d839e89ba189",
			"urls": [
				"bzzr://4751eff29e38df34709d44db7755a341424135e17fad8d81804d3d7d66cd6f6e"
			]
		},
		"contracts/_custom/oldproxy/UpgradeableProxy.sol": {
			"keccak256": "0xabcf38154774745e038dc4079ff3ec063352ad5a6975c8c02e3e77a2c5b96562",
			"urls": [
				"bzzr://78ba7817944395b86eb9c7fdc3c6e2447411ec3f579e51e34744b36a2ab7ea95"
			]
		},
		"contracts/ownership/Ownable.sol": {
			"keccak256": "0xa738bb8fd54e05f69755d0a77a2d5be382264ab57bc9c0b3cbf4425a1f33ac56",
			"urls": [
				"bzzr://974c98184f8428ee37bb5b04503db82005166fdb82cd32207305e8facbd89c7a"
			]
		},
		"contracts/utils/Address.sol": {
			"keccak256": "0x823cd3a29dd4f710e9350f8e569f4db5bcd25a32257b7586c2603b5c205f1d76",
			"urls": [
				"bzzr://16eb37aaae6ccbccbadb24cc0722fcd69f45705d34ac439ec627327376d6ac09"
			]
		}
	},
	"version": 1
}